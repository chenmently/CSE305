package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.HashSet;
import java.util.HashMap;

import model.Auction;
import model.Bid;
import model.Item;

public class ItemDao {

	public List<Item> getItems() {

		/*
		 * The students code to fetch data from the database will be written here Query
		 * to fetch details of all the items has to be implemented Each record is
		 * required to be encapsulated as a "Item" class object and added to the "items"
		 * List
		 */

		List<Item> items = new ArrayList<Item>();

		/* Sample data begins */
		// for (int i = 0; i < 10; i++) {
		// Item item = new Item();
		// item.setItemID(123);
		// item.setDescription("sample description");
		// item.setType("BOOK");
		// item.setName("Sample Book");
		// item.setNumCopies(2);
		// items.add(item);
		// }
		/* Sample data ends */
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// String dbPass = System.getenv("DB_PASSWORD");

			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/quickbid", "root", "password");
			Statement s = con.createStatement();
			ResultSet rs = s.executeQuery("select * from item");
			while (rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("item_id"));
				item.setName(rs.getString("name"));
				item.setType(rs.getString("type"));
				item.setNumCopies(rs.getInt("num_copies"));
				item.setDescription(rs.getString("description"));
				item.setYearManufactured(rs.getInt("year_manufactured"));
				items.add(item);
			}
			rs.close();
			
		} catch (Exception e) {
			System.out.println(e);
		}
		return items;

	}

	public List<Item> getBestsellerItems() {

		/*
		 * The students code to fetch data from the database will be written here Query
		 * to fetch details of the bestseller items has to be implemented Each record is
		 * required to be encapsulated as a "Item" class object and added to the "items"
		 * List
		 */

		List<Item> items = new ArrayList<Item>();

		/* Sample data begins */
		// for (int i = 0; i < 5; i++) {
		// Item item = new Item();
		// item.setItemID(123);
		// item.setDescription("sample description");
		// item.setType("BOOK");
		// item.setName("Sample Book");
		// item.setNumCopies(2);
		// items.add(item);
		// }
		/* Sample data ends */
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// String dbPass = System.getenv("DB_PASSWORD");

			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/quickbid", "root", "password");
			Statement s = con.createStatement();
			ResultSet rs = s.executeQuery("select *, SUM(copies_sold) from sold_items "
					+ "inner join auctions " + "on auctions.auction_id = sold_items.auction_id " + "inner join item "
					+ "on item.item_id = auctions.item_id " + "where auctions.is_closed = 1 " + "group by item.name "
					+ "order by SUM(copies_sold) desc " + "limit 5");
			while (rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("item_id"));
				item.setName(rs.getString("name"));
				item.setType(rs.getString("type"));
				item.setNumCopies(rs.getInt("num_copies"));
				item.setDescription(rs.getString("description"));
				item.setYearManufactured(rs.getInt("year_manufactured"));
				items.add(item);
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
		}
		return items;

	}

	public List<Item> getSummaryListing(String searchKeyword) {

		/*
		 * The students code to fetch data from the database will be written here Query
		 * to fetch details of summary listing of revenue generated by a particular item
		 * or item type must be implemented Each record is required to be encapsulated
		 * as a "Item" class object and added to the "items" ArrayList Store the revenue
		 * generated by an item in the soldPrice attribute, using setSoldPrice method of
		 * each "item" object
		 */

		List<Item> items = new ArrayList<Item>();

		/* Sample data begins */
		// for (int i = 0; i < 6; i++) {
		// Item item = new Item();
		// item.setItemID(123);
		// item.setDescription("sample description");
		// item.setType("BOOK");
		// item.setName("Sample Book");
		// item.setSoldPrice(150);
		// items.add(item);
		// }
		/* Sample data ends */
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// String dbPass = System.getenv("DB_PASSWORD");

			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/quickbid", "root", "password");
			Statement s = con.createStatement();
			// maybe change customer search field to their first/last name instead of their customerid ??
			ResultSet rs = s.executeQuery("select *, SUM(current_high_bid) "  
					+ "FROM sold_items "
					+ "INNER JOIN auctions " 
						+ "ON sold_items.auction_id = auctions.auction_id " 
					+ "INNER JOIN item "
						+ "ON auctions.item_id = item.item_id " 
					+ "where item.name like \'%" + searchKeyword + "%\' or "
							+ "item.type like \'%" + searchKeyword + "%\' or "
							+ "sold_items.customer_id like \'%" + searchKeyword + "%\'");
			while (rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("item_id"));
				item.setName(rs.getString("name"));
				item.setType(rs.getString("type"));
				item.setNumCopies(rs.getInt("num_copies"));
				item.setDescription(rs.getString("description"));
				item.setYearManufactured(rs.getInt("year_manufactured"));
				item.setSoldPrice(rs.getInt("SUM(current_high_bid)"));
				items.add(item);
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
		}
		return items;

	}
	public List<Item> getItemSuggestions(String customerID) {

		/*
		 * The students code to fetch data from the database will be written here Query
		 * to fetch item suggestions for a customer, indicated by customerID, must be
		 * implemented customerID, which is the Customer's ID for whom the item
		 * suggestions are fetched, is given as method parameter Each record is required
		 * to be encapsulated as a "Item" class object and added to the "items"
		 * ArrayList
		 */

		List<Item> items = new ArrayList<Item>();


		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// String dbPass = System.getenv("DB_PASSWORD");

			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/quickbid", "root", "password");
			Statement s = con.createStatement();

			ArrayList<Item> boughtItems = new ArrayList<Item>();

			// fix sql query for item suggestions
			ResultSet rs = s.executeQuery("select * "  
					+ "from sold_items " 
                    + "inner join item"
					+ "on item.item_id = sold_item.item_id "
					+ "where sold_items.customer_id like  \'%" + customerID + "%\'"); 
					
			while (rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("item_id"));
				item.setName(rs.getString("name"));
				item.setType(rs.getString("type"));
				item.setNumCopies(rs.getInt("num_copies"));
				item.setDescription(rs.getString("description"));
				item.setYearManufactured(rs.getInt("year_manufactured"));
				boughtItems.add(item);
			}
			rs.close();

            ArrayList<Item> allItems = new ArrayList<Item>();
			rs = s.executeQuery("select * "  
					+ "from items");
					
			while (rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("item_id"));
				item.setName(rs.getString("name"));
				item.setType(rs.getString("type"));
				item.setNumCopies(rs.getInt("num_copies"));
				item.setDescription(rs.getString("description"));
				item.setYearManufactured(rs.getInt("year_manufactured"));
				allItems.add(item);
			}
			rs.close();

			HashSet<String> type = new HashSet<String>();

			for(Item item:boughtItems) {
				type.add(item.getType());
			}

			for(Item item:allItems) {
				if(type.contains(item.getType()) && item.getNumCopies() > 0) {
					items.add(item);
				}
			}

		
							


		} catch (Exception e) {
			System.out.println(e);
		}
		return items;

	}
	public List<List<?>> getItemsBySeller(String sellerID) {

		/*
		 * The students code to fetch data from the database will be written here Query
		 * to fetch items sold by a given seller, indicated by sellerID, must be
		 * implemented sellerID, which is the Sellers's ID who's items are fetched, is
		 * given as method parameter The bid and auction details of each of the items
		 * should also be fetched The bid details must have the highest current bid for
		 * the item The auction details must have the details about the auction in which
		 * the item is sold Each item record is required to be encapsulated as a "Item"
		 * class object and added to the "items" List Each bid record is required to be
		 * encapsulated as a "Bid" class object and added to the "bids" List Each
		 * auction record is required to be encapsulated as a "Auction" class object and
		 * added to the "auctions" List The items, bids and auctions Lists have to be
		 * added to the "output" List and returned
		 */

		List<List<?>> output = new ArrayList<>();
		List<Item> items = new ArrayList<Item>();
		List<Bid> bids = new ArrayList<Bid>();
		List<Auction> auctions = new ArrayList<Auction>();

		/* Sample data begins */
		// for (int i = 0; i < 4; i++) {
		// Item item = new Item();
		// item.setItemID(123);
		// item.setDescription("sample description");
		// item.setType("BOOK");
		// item.setName("Sample Book");
		// items.add(item);
		//
		// Bid bid = new Bid();
		// bid.setCustomerID("123-12-1234");
		// bid.setBidPrice(120);
		// bids.add(bid);
		//
		// Auction auction = new Auction();
		// auction.setMinimumBid(100);
		// auction.setBidIncrement(10);
		// auction.setAuctionID(123);
		// auctions.add(auction);
		// }
		/* Sample data ends */
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// String dbPass = System.getenv("DB_PASSWORD");

			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/quickbid", "root", "password");
			Statement s = con.createStatement();
			ResultSet rs = s.executeQuery("select * " + "FROM auctions " + "INNER JOIN sold_items"
					+ "on sold_items.auction_id = auctions.auction_id " + "INNER JOIN item " + "on items.item_id = auctions.item_id " + "where customer_id = " + sellerID);
			
			while(rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("item_id"));
				item.setDescription(rs.getString("description"));
				item.setType(rs.getString("type"));
				item.setName(rs.getString("name"));
				items.add(item);
				
				Bid bid = new Bid();
				bid.setCustomerID(rs.getString("customer_id"));
				bid.setBidPrice(rs.getFloat("current_high_bid"));
				bids.add(bid);
				
				Auction auction = new Auction();
				auction.setMinimumBid(rs.getFloat("minimum_bid"));
				auction.setBidIncrement(rs.getFloat("bid_increment"));
				auction.setAuctionID(rs.getInt("auction_id"));
				auctions.add(auction);
				
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
		}
		output.add(items);
		output.add(bids);
		output.add(auctions);

		return output;
	}

	public List<Item> getItemTypes() {

		/*
		 * The students code to fetch data from the database will be written here Each
		 * record is required to be encapsulated as a "Item" class object and added to
		 * the "items" ArrayList A query to fetch the unique item types has to be
		 * implemented Each item type is to be added to the "item" object using setType
		 * method
		 */

		List<Item> items = new ArrayList<Item>();

		/* Sample data begins */
		// for (int i = 0; i < 6; i++) {
		// Item item = new Item();
		// item.setType("BOOK");
		// items.add(item);
		// }
		/* Sample data ends */
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// String dbPass = System.getenv("DB_PASSWORD");

			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/quickbid", "root", "password");
			Statement s = con.createStatement();
			ResultSet rs = s.executeQuery("select distinct type " + "FROM item");
			while (rs.next()) {
				Item item = new Item();
				item.setType(rs.getString("type"));
				items.add(item);
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
		}
		return items;
	}

	public List<List<?>> getItemsByName(String itemName) {

		/*
		 * The students code to fetch data from the database will be written here The
		 * itemName, which is the item's name on which the query has to be implemented,
		 * is given as method parameter Query to fetch items containing itemName in
		 * their name has to be implemented Each item's corresponding auction data also
		 * has to be fetched Each item record is required to be encapsulated as a "Item"
		 * class object and added to the "items" List Each auction record is required to
		 * be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and
		 * returned
		 */

		List<List<?>> output = new ArrayList<>();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();

		/* Sample data begins */
		// for (int i = 0; i < 4; i++) {
		// Item item = new Item();
		// item.setItemID(123);
		// item.setDescription("sample description");
		// item.setType("BOOK");
		// item.setName("Sample Book");
		// items.add(item);
		//
		// Auction auction = new Auction();
		// auction.setMinimumBid(100);
		// auction.setBidIncrement(10);
		// auctions.add(auction);
		// }
		/* Sample data ends */
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// String dbPass = System.getenv("DB_PASSWORD");

			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/quickbid", "root", "password");
			Statement s = con.createStatement();
			ResultSet rs = s.executeQuery("select * " + "FROM item " + "INNER JOIN auctions "
					+ "ON auctions.item_id = item.item_id " + "where item.name like \'%" + itemName + "%\' and auctions.is_closed = 0");
			while (rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("item_id"));
				item.setName(rs.getString("name"));
				item.setType(rs.getString("type"));
				item.setNumCopies(rs.getInt("num_copies"));
				item.setDescription(rs.getString("description"));
				item.setYearManufactured(rs.getInt("year_manufactured"));
				items.add(item);

				Auction auction = new Auction();
				auction.setAuctionID(rs.getInt("auction_id"));
				auction.setBidIncrement(rs.getFloat("bid_increment"));
				auction.setMinimumBid(rs.getFloat("minimum_bid"));
				auction.setCopiesSold(rs.getInt("copies_sold"));
				auction.setItemID(rs.getInt("item_id"));
				auction.setClosingBid(rs.getInt("closing_bid"));
				auction.setCurrentBid(rs.getInt("current_bid"));
				auction.setCurrentHighBid(rs.getInt("current_high_bid"));
				auction.setReserve(rs.getInt("reserve"));
				auction.setEmployeeID(rs.getString("monitor_id"));
				auctions.add(auction);
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
		}
		output.add(items);
		output.add(auctions);

		return output;
	}

	public List<List<?>> getItemsByType(String itemType) {

		/*
		 * The students code to fetch data from the database will be written here The
		 * itemType, which is the item's type on which the query has to be implemented,
		 * is given as method parameter Query to fetch items containing itemType as
		 * their type has to be implemented Each item's corresponding auction data also
		 * has to be fetched Each item record is required to be encapsulated as a "Item"
		 * class object and added to the "items" List Each auction record is required to
		 * be encapsulated as a "Auction" class object and added to the "auctions" List
		 * The items and auctions Lists are to be added to the "output" List and
		 * returned
		 */

		List<List<?>> output = new ArrayList<>();
		List<Item> items = new ArrayList<Item>();
		List<Auction> auctions = new ArrayList<Auction>();

		/* Sample data begins */
		// for (int i = 0; i < 4; i++) {
		// Item item = new Item();
		// item.setItemID(123);
		// item.setDescription("sample description");
		// item.setType("BOOK");
		// item.setName("Sample Book");
		// items.add(item);
		//
		// Auction auction = new Auction();
		// auction.setMinimumBid(100);
		// auction.setBidIncrement(10);
		// auctions.add(auction);
		// }
		/* Sample data ends */
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// String dbPass = System.getenv("DB_PASSWORD");

			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/quickbid", "root", "password");
			Statement s = con.createStatement();
			ResultSet rs = s.executeQuery("select * " + "FROM item " + "INNER JOIN auctions "
					+ "ON auctions.item_id = item.item_id " + "where item.type like \'%" + itemType + "%\' and auctions.is_closed = 0");
			while (rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("item_id"));
				item.setName(rs.getString("name"));
				item.setType(rs.getString("type"));
				item.setNumCopies(rs.getInt("num_copies"));
				item.setDescription(rs.getString("description"));
				item.setYearManufactured(rs.getInt("year_manufactured"));
				items.add(item);

				Auction auction = new Auction();
				auction.setAuctionID(rs.getInt("auction_id"));
				auction.setBidIncrement(rs.getFloat("bid_increment"));
				auction.setMinimumBid(rs.getFloat("minimum_bid"));
				auction.setCopiesSold(rs.getInt("copies_sold"));
				auction.setItemID(rs.getInt("item_id"));
				auction.setClosingBid(rs.getInt("closing_bid"));
				auction.setCurrentBid(rs.getInt("current_bid"));
				auction.setCurrentHighBid(rs.getInt("current_high_bid"));
				auction.setReserve(rs.getInt("reserve"));
				auction.setEmployeeID(rs.getString("monitor_id"));
				auctions.add(auction);
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
		}
		output.add(items);
		output.add(auctions);

		return output;
	}

	public List<Item> getBestsellersForCustomer(String customerID) {

		/*
		 * The students code to fetch data from the database will be written here. Each
		 * record is required to be encapsulated as a "Item" class object and added to
		 * the "items" ArrayList. Query to get the Best-seller list of items for a
		 * particular customer, indicated by the customerID, has to be implemented The
		 * customerID, which is the customer's ID for whom the Best-seller items have to
		 * be fetched, is given as method parameter
		 */

		List<Item> items = new ArrayList<Item>();

		/* Sample data begins */
		// for (int i = 0; i < 6; i++) {
		// Item item = new Item();
		// item.setItemID(123);
		// item.setDescription("sample description");
		// item.setType("BOOK");
		// item.setName("Sample Book");
		// item.setNumCopies(50);
		// items.add(item);
		// }
		/* Sample data ends */
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			// String dbPass = System.getenv("DB_PASSWORD");

			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/quickbid", "root", "password");
			Statement s = con.createStatement();
			String sql = "select *, SUM(copies_sold) from sold_items "
					+ "inner join auctions " 
						+ "on auctions.auction_id = sold_items.auction_id " 
					+ "inner join item "
						+ "on item.item_id = auctions.item_id "
					+ "inner join customer "
						+ "on sold_items.customer_id = customer.customer_id "
					+ "where auctions.is_closed = 1 and "
					+ "customer.ssn = '" + customerID + "' " + "group by item.name "
					+ "order by SUM(copies_sold) desc " + "limit 5";
			ResultSet rs = s.executeQuery(sql);
			while (rs.next()) {
				Item item = new Item();
				item.setItemID(rs.getInt("item_id"));
				item.setName(rs.getString("name"));
				item.setType(rs.getString("type"));
				item.setNumCopies(rs.getInt("num_copies"));
				item.setDescription(rs.getString("description"));
				item.setYearManufactured(rs.getInt("year_manufactured"));
				items.add(item);
			}
			rs.close();
		} catch (Exception e) {
			System.out.println(e);
		}
		return items;

	}

}
